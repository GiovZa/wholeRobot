# PIDF is proportional, integrator, and filtered derivative, which sets how motors reach 
# a set position intelligently. Look at following link to see what each component does:
# https://commons.wikimedia.org/wiki/File:PID_Compensation_Animated.gif
# Besides how to tune the motors with gif above, I suggest some more research but to sum it up,
# you want to generally use P and then a tiny bit of I to tune motors and I Zone to limit range of I
# you get to use Phoenix Motors' encoders that keeps track of position. If you use percent output,
# it has no idea how far it travels but with PID, you can have it reach the exact spot you want
# consistently with efficient movement.

# Current PID config for wheels
wheel_cfg:
  closedloopRamp: 1

  # Each falcon motor has multiple slots that can each contain their own PIDFs, here we use slot0
  # This is the PID the previous Robotics Club coder set up, so I just pulled it but haven't
  # implemented with ROS because we haven't used wheel odometry yet, we will have to get
  # new PID for the wheels to sensor fuse everything with wheels accurately. This will be the 
  # case for all the motors
  slot0: {
    kP: 0.1,
    kI: 0.002,
    kD: 5.0,
    kF: 0.035,

    # I don't know what this one does, someone figure this out
    maxIntegralAccumulator: 16000
  }

# Ballscrew configuration, the ballscrew is what extends the auger to deposit and mine
# How I have it set up, the ballscrew has a zero position when it is all the way inside
bscrew_cfg:

  # drive position is when the auger is all the way tucked inside the sheath
  drivePosition: 0

  # the other positions are negative because motor spins counterclockwise, which is in -
  # direction of 0. These are just currently arbitrary positions
  depositPosition: -4000000
  digPosition: -1000000

  # this is the duration of time the motors will spin, it is currently not being used however
  miliseconds: 1000

  # this is what is used for motion magic, I haven't used it yet so I don't know how to use this, 
  # this is last year's configuration
  motionCruiseVelocity: 25000
  motionAcceleration: 100000
  motionCurveStrength: 0
  clearPositionOnLimitF: true

  slot0: {
    kP: 0.5, #0.5
    kI: 0.00000 # 0
    # maxIntegralAccumulator: 50000
  }

# Linear actuator configuration, this changes the angle the auger is facing ex. up to deposit
# or down to dig
linact_cfg:

  # auger is parallel to ground
  drivePosition: -14 # 0

  # auger is all the way up
  depositPosition: 0 # 10

  # auger is all the way down
  digPosition: -80 # -60
  miliseconds: 1000

  motionCruiseVelocity: 4
  motionAcceleration: 10
  motionCurveStrength: 0

  slot0: {
    kP: 42, #45
    kI: 0.0008 #0.001 # 0.0001
  }

